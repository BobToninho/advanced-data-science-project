#knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggthemes)
library(modelr)
library(magick)
library(dplyr)
library(tidyr)
library(stringr)
library(cowplot)
summary(mod4)$r.squared
mod4 <-
lm(
# user_rating ~ size_bytes + price + prime_genre + rating_count_tot + rating_count_ver + cont_rating,
user_rating ~ size_bytes + price + prime_genre + rating_count_tot,
data = storeForPrediction
)
storeForPrediction <- store %>%
select(id, size_bytes, price, prime_genre, user_rating, rating_count_tot, rating_count_ver, cont_rating) %>%
# select( size_bytes,
#        price,
#        prime_genre,
#        user_rating,
#        rating_count_tot) %>%
mutate(prime_genre = as.numeric(prime_genre)) %>%
mutate(cont_rating = as.numeric(cont_rating)) %>%
mutate(user_rating = ifelse(
is.na(user_rating),
mean(user_rating, na.rm = TRUE),
user_rating
))
# The dataset has 11k records but ~4k are empty
# saveRDS(as_tibble(applestoreR::AppleStore), file = "app-store.rds")
# store <- na.omit(as_tibble(applestoreR::AppleStore))  %>%
store <- na.omit(as_tibble(readRDS("app-store.rds")))  %>%
mutate(user_rating_factor = as.factor(user_rating))
categories <- store %>%
group_by(prime_genre) %>%
summarise(count = n())
categoriesWithMostApps = store %>%
group_by(prime_genre) %>%
summarise(number_of_apps = n())  %>%
mutate(percentage = (number_of_apps / sum(number_of_apps)) * 100) %>%
arrange(-number_of_apps)
groupedByFreeOrPaid = store %>%
mutate(is_free = price == 0) %>%
group_by(is_free) %>%
summarise(count = n()) %>%
mutate(type = as.character(sum(count))) %>%
mutate(percentage = (count / sum(count)) * 100)
paidApps = store %>%
filter(price != 0) %>%
group_by(price) %>%
summarise(count = n()) %>%
arrange(-count)
storeForPrediction <- store %>%
select(id, size_bytes, price, prime_genre, user_rating, rating_count_tot, rating_count_ver, cont_rating) %>%
# select( size_bytes,
#        price,
#        prime_genre,
#        user_rating,
#        rating_count_tot) %>%
mutate(prime_genre = as.numeric(prime_genre)) %>%
mutate(cont_rating = as.numeric(cont_rating)) %>%
mutate(user_rating = ifelse(
is.na(user_rating),
mean(user_rating, na.rm = TRUE),
user_rating
))
# user_rating ~
summary(mod4)$r.squared
# mod1 <-
#   lm(user_rating ~ size_bytes,
#      data = storeForPrediction)
# mod2 <-
#   lm(user_rating ~ price,
#      data = storeForPrediction)
# mod3 <-
#   lm(user_rating ~ rating_count_tot,
#      data = storeForPrediction)
mod4 <-
lm(
# user_rating ~ size_bytes + price + prime_genre + rating_count_tot + rating_count_ver + cont_rating,
user_rating ~ size_bytes + price + prime_genre + rating_count_tot,
data = storeForPrediction
)
summary(mod4)$r.squared
